plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '18'
targetCompatibility = '18'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
def args = [ "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED", "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior" + "=ALL-UNNAMED", "--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED", "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior" + "=com.jfoenix", "--add-exports=javafx.controls/com.sun.javafx.binding=com.jfoenix", "--illegal-access=warn", "--add-opens=javafx.controls/javafx.scene.control.skin=com.jfoenix", "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED", "--add-opens=java.base/java.lang.reflect=com.jfoenix", "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior" + "=com.jfoenix", "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix", "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix", "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix", "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix" ]
application {
    mainModule = 'com.example.dsm_402_qualite_vone'
    mainClass = 'com.example.dsm_402_qualite_vone.Main'
    applicationDefaultJvmArgs = args

}

javafx {
    version = '18.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation files("C:/Users/adria/Documents/NetBeansProjects/Librerias/jfoenix-9.0.10.jar")
    implementation files("C:/Users/adria/Documents/NetBeansProjects/Librerias/gson/gson-2.8.0.jar")
    implementation fileTree(includes: ['*.jar'], dir: '../Librerias/unirest')

}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}